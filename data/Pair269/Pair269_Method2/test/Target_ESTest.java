/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 26 07:22:23 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Target_ESTest extends Target_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Target target0 = new Target();
      List<String> list0 = List.of("Target", "Target");
      List<String> list1 = target0.__target__(list0);
      assertTrue(list1.contains("Target"));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Target target0 = new Target();
      List<String> list0 = List.of("", "");
      // Undeclared exception!
      try { 
        target0.__target__(list0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Target target0 = new Target();
      // Undeclared exception!
      try { 
        target0.__target__((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Target", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      List<String> list0 = List.of("Z8a0qg'(?ega:Cn");
      Target target0 = new Target();
      List<String> list1 = target0.__target__(list0);
      assertFalse(list1.contains("Z8a0qg'(?ega:Cn"));
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Target target0 = new Target();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add(0, "qxW/{~<Ax'QqJ");
      List<String> list0 = target0.__target__(linkedList0);
      assertTrue(list0.contains("qxW/{~<Ax'QqJ"));
  }
}
