/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 28 03:07:22 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Target_ESTest extends Target_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Target target0 = new Target();
      Vector vector0 = target0.__target__("M-VID6QKJ");
      assertEquals("[M-VID6QKJ]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Target target0 = new Target();
      Vector vector0 = target0.__target__("504\"cP\bP,{n;.+$");
      assertEquals("[504cP\bP,{n;.+$]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Target target0 = new Target();
      // Undeclared exception!
      try { 
        target0.__target__((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Target", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Target target0 = new Target();
      Vector vector0 = target0.__target__("'i6meyqxb*yf");
      assertEquals("[i6meyqxb*yf]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Target target0 = new Target();
      Vector vector0 = target0.__target__("qR\\");
      assertEquals("[qR]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Target target0 = new Target();
      Vector vector0 = target0.__target__(":An&m{T7x(MDCeub ");
      assertEquals("[:An&m{T7x(MDCeub]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Target target0 = new Target();
      Vector vector0 = target0.__target__("\"");
      assertTrue(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Target target0 = new Target();
      Vector vector0 = target0.__target__(" Z|*13zVHn@\"\"q(Yiq");
      assertEquals("[Z|*13zVHn@, q(Yiq]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Target target0 = new Target();
      Vector vector0 = target0.__target__("z7vhuK+@CSr\"UU$q9/'");
      assertEquals("[z7vhuK+@CSrUU$q9/]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Target target0 = new Target();
      Vector vector0 = target0.__target__("k)sM}$HZ8''m4");
      assertEquals("[k)sM}$HZ8, m4]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Target target0 = new Target();
      Vector vector0 = target0.__target__("(bC'SolAARCT\"btz");
      assertEquals("[(bCSolAARCTbtz]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Target target0 = new Target();
      Vector vector0 = target0.__target__(")\\15$EPfey6");
      assertEquals("[)15$EPfey6]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Target target0 = new Target();
      Vector vector0 = target0.__target__("\"G0:)05 k+");
      assertEquals("[G0:)05 k+]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Target target0 = new Target();
      Vector vector0 = target0.__target__("5,~'V62\nv{\"");
      assertEquals("[5,~V62\nv{]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Target target0 = new Target();
      Vector vector0 = target0.__target__("iEY+OP;v\t)naLu|f");
      assertEquals("[iEY+OP;v, )naLu|f]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Target target0 = new Target();
      Vector vector0 = target0.__target__("d<I,U \r8I8");
      assertEquals("[d<I,U, 8I8]", vector0.toString());
  }
}
