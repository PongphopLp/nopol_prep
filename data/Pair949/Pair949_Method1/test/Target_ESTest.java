/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 29 08:32:01 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Target_ESTest extends Target_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Target target0 = new Target();
      Integer integer0 = new Integer(0);
      Vector<Object> vector0 = new Vector<Object>();
      target0.__target__(integer0, vector0);
      assertTrue(vector0.contains(0));
      assertEquals(1, vector0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Target target0 = new Target();
      Vector<Object> vector0 = new Vector<Object>();
      Object object0 = target0.__target__((Object) null, vector0);
      vector0.add((Object) null);
      // Undeclared exception!
      target0.__target__(vector0, object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Target target0 = new Target();
      Vector<Object> vector0 = new Vector<Object>();
      Object object0 = new Object();
      target0.__target__(vector0, object0);
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Target target0 = new Target();
      Integer integer0 = new Integer(0);
      Vector vector0 = (Vector)target0.__target__(integer0, integer0);
      assertEquals(10, vector0.capacity());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Target target0 = new Target();
      Object object0 = new Object();
      Object object1 = target0.__target__(object0, (Object) null);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Target target0 = new Target();
      Object object0 = target0.__target__((Object) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Target target0 = new Target();
      Vector<Object> vector0 = new Vector<Object>();
      Vector vector1 = (Vector)target0.__target__(vector0, vector0);
      assertTrue(vector1.isEmpty());
  }
}
