01, InvertNegatives, 5, "-3.969683028665376e+01", "3.969683028665376e+01"
02, InvertNegatives, 5, "-2.759285104469687e+02", "2.759285104469687e+02"
03, InvertNegatives, 5, "-3.066479806614716e+01", "3.066479806614716e+01"
04, InvertNegatives, 6, "-5.447609879822406e+01", "5.447609879822406e+01"
05, InvertNegatives, 6, "-1.556989798598866e+02", "1.556989798598866e+02"
06, InvertNegatives, 6, "-1.328068155288572e+01", "1.328068155288572e+01"
07, InvertNegatives, 7, "-7.784894002430293e-03", "7.784894002430293e-03"
08, InvertNegatives, 7, "-3.223964580411365e-01", "3.223964580411365e-01"
09, InvertNegatives, 7, "-2.400758277161838e+00", "2.400758277161838e+00"
10, InvertNegatives, 7, "-2.549732539343734e+00", "2.549732539343734e+00"
11, InvertNegatives, 16, "-2", "2"
12, InvertNegatives, 20, "-2", "2"
13, InvertNegatives, 21, "-(((((ICDF_C[0] * q + ICDF_C[1]) * q + ICDF_C[2]) * q + ICDF_C[3]) * q + ICDF_C[4]) * q + ICDF_C[5])", "(((((ICDF_C[0] * q + ICDF_C[1]) * q + ICDF_C[2]) * q + ICDF_C[3]) * q + ICDF_C[4]) * q + ICDF_C[5])"
14, NegateConditionals, 12, "d == 0", "d != 0"
15, NegateConditionals, 13, "d == 1", "d != 1"
16, NegateConditionals, 14, "d < 0", "d >= 0"
17, NegateConditionals, 14, "d > 1", "d <= 1"
18, NegateConditionals, 15, "d < P_LOW", "d >= P_LOW"
19, NegateConditionals, 19, "P_HIGH < d", "P_HIGH >= d"
20, Math, 10, "1.0D - P_LOW", "1.0D + P_LOW"
21, Math, 16, "-2 * Math.log(d)", "-2 / Math.log(d)"
22, Math, 17, "(((((ICDF_C[0] * q + ICDF_C[1]) * q + ICDF_C[2]) * q + ICDF_C[3]) * q + ICDF_C[4]) * q + ICDF_C[5]) / ((((ICDF_D[0] * q + ICDF_D[1]) * q + ICDF_D[2]) * q + ICDF_D[3]) * q + 1)", "(((((ICDF_C[0] * q + ICDF_C[1]) * q + ICDF_C[2]) * q + ICDF_C[3]) * q + ICDF_C[4]) * q + ICDF_C[5]) * ((((ICDF_D[0] * q + ICDF_D[1]) * q + ICDF_D[2]) * q + ICDF_D[3]) * q + 1)"
23, Math, 17, "((((ICDF_C[0] * q + ICDF_C[1]) * q + ICDF_C[2]) * q + ICDF_C[3]) * q + ICDF_C[4]) * q + ICDF_C[5]", "((((ICDF_C[0] * q + ICDF_C[1]) * q + ICDF_C[2]) * q + ICDF_C[3]) * q + ICDF_C[4]) * q - ICDF_C[5]"
24, Math, 17, "((((ICDF_C[0] * q + ICDF_C[1]) * q + ICDF_C[2]) * q + ICDF_C[3]) * q + ICDF_C[4]) * q", "((((ICDF_C[0] * q + ICDF_C[1]) * q + ICDF_C[2]) * q + ICDF_C[3]) * q + ICDF_C[4]) / q"
25, Math, 17, "(((ICDF_C[0] * q + ICDF_C[1]) * q + ICDF_C[2]) * q + ICDF_C[3]) * q + ICDF_C[4]", "(((ICDF_C[0] * q + ICDF_C[1]) * q + ICDF_C[2]) * q + ICDF_C[3]) * q - ICDF_C[4]"
26, Math, 17, "(((ICDF_C[0] * q + ICDF_C[1]) * q + ICDF_C[2]) * q + ICDF_C[3]) * q", "(((ICDF_C[0] * q + ICDF_C[1]) * q + ICDF_C[2]) * q + ICDF_C[3]) / q"
27, Math, 17, "((ICDF_C[0] * q + ICDF_C[1]) * q + ICDF_C[2]) * q + ICDF_C[3]", "((ICDF_C[0] * q + ICDF_C[1]) * q + ICDF_C[2]) * q - ICDF_C[3]"
28, Math, 17, "((ICDF_C[0] * q + ICDF_C[1]) * q + ICDF_C[2]) * q", "((ICDF_C[0] * q + ICDF_C[1]) * q + ICDF_C[2]) / q"
29, Math, 17, "(ICDF_C[0] * q + ICDF_C[1]) * q + ICDF_C[2]", "(ICDF_C[0] * q + ICDF_C[1]) * q - ICDF_C[2]"
30, Math, 17, "(ICDF_C[0] * q + ICDF_C[1]) * q", "(ICDF_C[0] * q + ICDF_C[1]) / q"
31, Math, 17, "ICDF_C[0] * q + ICDF_C[1]", "ICDF_C[0] * q - ICDF_C[1]"
32, Math, 17, "ICDF_C[0] * q", "ICDF_C[0] / q"
33, Math, 17, "(((ICDF_D[0] * q + ICDF_D[1]) * q + ICDF_D[2]) * q + ICDF_D[3]) * q + 1", "(((ICDF_D[0] * q + ICDF_D[1]) * q + ICDF_D[2]) * q + ICDF_D[3]) * q - 1"
34, Math, 17, "(((ICDF_D[0] * q + ICDF_D[1]) * q + ICDF_D[2]) * q + ICDF_D[3]) * q", "(((ICDF_D[0] * q + ICDF_D[1]) * q + ICDF_D[2]) * q + ICDF_D[3]) / q"
35, Math, 17, "((ICDF_D[0] * q + ICDF_D[1]) * q + ICDF_D[2]) * q + ICDF_D[3]", "((ICDF_D[0] * q + ICDF_D[1]) * q + ICDF_D[2]) * q - ICDF_D[3]"
36, Math, 17, "((ICDF_D[0] * q + ICDF_D[1]) * q + ICDF_D[2]) * q", "((ICDF_D[0] * q + ICDF_D[1]) * q + ICDF_D[2]) / q"
37, Math, 17, "(ICDF_D[0] * q + ICDF_D[1]) * q + ICDF_D[2]", "(ICDF_D[0] * q + ICDF_D[1]) * q - ICDF_D[2]"
38, Math, 17, "(ICDF_D[0] * q + ICDF_D[1]) * q", "(ICDF_D[0] * q + ICDF_D[1]) / q"
39, Math, 17, "ICDF_D[0] * q + ICDF_D[1]", "ICDF_D[0] * q - ICDF_D[1]"
40, Math, 17, "ICDF_D[0] * q", "ICDF_D[0] / q"
41, Math, 20, "-2 * Math.log(1 - d)", "-2 / Math.log(1 - d)"
42, Math, 20, "1 - d", "1 + d"
43, Math, 21, "-(((((ICDF_C[0] * q + ICDF_C[1]) * q + ICDF_C[2]) * q + ICDF_C[3]) * q + ICDF_C[4]) * q + ICDF_C[5]) / ((((ICDF_D[0] * q + ICDF_D[1]) * q + ICDF_D[2]) * q + ICDF_D[3]) * q + 1)", "-(((((ICDF_C[0] * q + ICDF_C[1]) * q + ICDF_C[2]) * q + ICDF_C[3]) * q + ICDF_C[4]) * q + ICDF_C[5]) * ((((ICDF_D[0] * q + ICDF_D[1]) * q + ICDF_D[2]) * q + ICDF_D[3]) * q + 1)"
44, Math, 21, "((((ICDF_C[0] * q + ICDF_C[1]) * q + ICDF_C[2]) * q + ICDF_C[3]) * q + ICDF_C[4]) * q + ICDF_C[5]", "((((ICDF_C[0] * q + ICDF_C[1]) * q + ICDF_C[2]) * q + ICDF_C[3]) * q + ICDF_C[4]) * q - ICDF_C[5]"
45, Math, 21, "((((ICDF_C[0] * q + ICDF_C[1]) * q + ICDF_C[2]) * q + ICDF_C[3]) * q + ICDF_C[4]) * q", "((((ICDF_C[0] * q + ICDF_C[1]) * q + ICDF_C[2]) * q + ICDF_C[3]) * q + ICDF_C[4]) / q"
46, Math, 21, "(((ICDF_C[0] * q + ICDF_C[1]) * q + ICDF_C[2]) * q + ICDF_C[3]) * q + ICDF_C[4]", "(((ICDF_C[0] * q + ICDF_C[1]) * q + ICDF_C[2]) * q + ICDF_C[3]) * q - ICDF_C[4]"
47, Math, 21, "(((ICDF_C[0] * q + ICDF_C[1]) * q + ICDF_C[2]) * q + ICDF_C[3]) * q", "(((ICDF_C[0] * q + ICDF_C[1]) * q + ICDF_C[2]) * q + ICDF_C[3]) / q"
48, Math, 21, "((ICDF_C[0] * q + ICDF_C[1]) * q + ICDF_C[2]) * q + ICDF_C[3]", "((ICDF_C[0] * q + ICDF_C[1]) * q + ICDF_C[2]) * q - ICDF_C[3]"
49, Math, 21, "((ICDF_C[0] * q + ICDF_C[1]) * q + ICDF_C[2]) * q", "((ICDF_C[0] * q + ICDF_C[1]) * q + ICDF_C[2]) / q"
50, Math, 21, "(ICDF_C[0] * q + ICDF_C[1]) * q + ICDF_C[2]", "(ICDF_C[0] * q + ICDF_C[1]) * q - ICDF_C[2]"
51, Math, 21, "(ICDF_C[0] * q + ICDF_C[1]) * q", "(ICDF_C[0] * q + ICDF_C[1]) / q"
52, Math, 21, "ICDF_C[0] * q + ICDF_C[1]", "ICDF_C[0] * q - ICDF_C[1]"
53, Math, 21, "ICDF_C[0] * q", "ICDF_C[0] / q"
54, Math, 21, "(((ICDF_D[0] * q + ICDF_D[1]) * q + ICDF_D[2]) * q + ICDF_D[3]) * q + 1", "(((ICDF_D[0] * q + ICDF_D[1]) * q + ICDF_D[2]) * q + ICDF_D[3]) * q - 1"
55, Math, 21, "(((ICDF_D[0] * q + ICDF_D[1]) * q + ICDF_D[2]) * q + ICDF_D[3]) * q", "(((ICDF_D[0] * q + ICDF_D[1]) * q + ICDF_D[2]) * q + ICDF_D[3]) / q"
56, Math, 21, "((ICDF_D[0] * q + ICDF_D[1]) * q + ICDF_D[2]) * q + ICDF_D[3]", "((ICDF_D[0] * q + ICDF_D[1]) * q + ICDF_D[2]) * q - ICDF_D[3]"
57, Math, 21, "((ICDF_D[0] * q + ICDF_D[1]) * q + ICDF_D[2]) * q", "((ICDF_D[0] * q + ICDF_D[1]) * q + ICDF_D[2]) / q"
58, Math, 21, "(ICDF_D[0] * q + ICDF_D[1]) * q + ICDF_D[2]", "(ICDF_D[0] * q + ICDF_D[1]) * q - ICDF_D[2]"
59, Math, 21, "(ICDF_D[0] * q + ICDF_D[1]) * q", "(ICDF_D[0] * q + ICDF_D[1]) / q"
60, Math, 21, "ICDF_D[0] * q + ICDF_D[1]", "ICDF_D[0] * q - ICDF_D[1]"
61, Math, 21, "ICDF_D[0] * q", "ICDF_D[0] / q"
62, Math, 24, "d - 0.5D", "d + 0.5D"
63, Math, 25, "q * q", "q / q"
64, Math, 26, "(((((ICDF_A[0] * r + ICDF_A[1]) * r + ICDF_A[2]) * r + ICDF_A[3]) * r + ICDF_A[4]) * r + ICDF_A[5]) * q / (((((ICDF_B[0] * r + ICDF_B[1]) * r + ICDF_B[2]) * r + ICDF_B[3]) * r + ICDF_B[4]) * r + 1)", "(((((ICDF_A[0] * r + ICDF_A[1]) * r + ICDF_A[2]) * r + ICDF_A[3]) * r + ICDF_A[4]) * r + ICDF_A[5]) * q * (((((ICDF_B[0] * r + ICDF_B[1]) * r + ICDF_B[2]) * r + ICDF_B[3]) * r + ICDF_B[4]) * r + 1)"
65, Math, 26, "(((((ICDF_A[0] * r + ICDF_A[1]) * r + ICDF_A[2]) * r + ICDF_A[3]) * r + ICDF_A[4]) * r + ICDF_A[5]) * q", "(((((ICDF_A[0] * r + ICDF_A[1]) * r + ICDF_A[2]) * r + ICDF_A[3]) * r + ICDF_A[4]) * r + ICDF_A[5]) / q"
66, Math, 26, "((((ICDF_A[0] * r + ICDF_A[1]) * r + ICDF_A[2]) * r + ICDF_A[3]) * r + ICDF_A[4]) * r + ICDF_A[5]", "((((ICDF_A[0] * r + ICDF_A[1]) * r + ICDF_A[2]) * r + ICDF_A[3]) * r + ICDF_A[4]) * r - ICDF_A[5]"
67, Math, 26, "((((ICDF_A[0] * r + ICDF_A[1]) * r + ICDF_A[2]) * r + ICDF_A[3]) * r + ICDF_A[4]) * r", "((((ICDF_A[0] * r + ICDF_A[1]) * r + ICDF_A[2]) * r + ICDF_A[3]) * r + ICDF_A[4]) / r"
68, Math, 26, "(((ICDF_A[0] * r + ICDF_A[1]) * r + ICDF_A[2]) * r + ICDF_A[3]) * r + ICDF_A[4]", "(((ICDF_A[0] * r + ICDF_A[1]) * r + ICDF_A[2]) * r + ICDF_A[3]) * r - ICDF_A[4]"
69, Math, 26, "(((ICDF_A[0] * r + ICDF_A[1]) * r + ICDF_A[2]) * r + ICDF_A[3]) * r", "(((ICDF_A[0] * r + ICDF_A[1]) * r + ICDF_A[2]) * r + ICDF_A[3]) / r"
70, Math, 26, "((ICDF_A[0] * r + ICDF_A[1]) * r + ICDF_A[2]) * r + ICDF_A[3]", "((ICDF_A[0] * r + ICDF_A[1]) * r + ICDF_A[2]) * r - ICDF_A[3]"
71, Math, 26, "((ICDF_A[0] * r + ICDF_A[1]) * r + ICDF_A[2]) * r", "((ICDF_A[0] * r + ICDF_A[1]) * r + ICDF_A[2]) / r"
72, Math, 26, "(ICDF_A[0] * r + ICDF_A[1]) * r + ICDF_A[2]", "(ICDF_A[0] * r + ICDF_A[1]) * r - ICDF_A[2]"
73, Math, 26, "(ICDF_A[0] * r + ICDF_A[1]) * r", "(ICDF_A[0] * r + ICDF_A[1]) / r"
74, Math, 26, "ICDF_A[0] * r + ICDF_A[1]", "ICDF_A[0] * r - ICDF_A[1]"
75, Math, 26, "ICDF_A[0] * r", "ICDF_A[0] / r"
76, Math, 26, "((((ICDF_B[0] * r + ICDF_B[1]) * r + ICDF_B[2]) * r + ICDF_B[3]) * r + ICDF_B[4]) * r + 1", "((((ICDF_B[0] * r + ICDF_B[1]) * r + ICDF_B[2]) * r + ICDF_B[3]) * r + ICDF_B[4]) * r - 1"
77, Math, 26, "((((ICDF_B[0] * r + ICDF_B[1]) * r + ICDF_B[2]) * r + ICDF_B[3]) * r + ICDF_B[4]) * r", "((((ICDF_B[0] * r + ICDF_B[1]) * r + ICDF_B[2]) * r + ICDF_B[3]) * r + ICDF_B[4]) / r"
78, Math, 26, "(((ICDF_B[0] * r + ICDF_B[1]) * r + ICDF_B[2]) * r + ICDF_B[3]) * r + ICDF_B[4]", "(((ICDF_B[0] * r + ICDF_B[1]) * r + ICDF_B[2]) * r + ICDF_B[3]) * r - ICDF_B[4]"
79, Math, 26, "(((ICDF_B[0] * r + ICDF_B[1]) * r + ICDF_B[2]) * r + ICDF_B[3]) * r", "(((ICDF_B[0] * r + ICDF_B[1]) * r + ICDF_B[2]) * r + ICDF_B[3]) / r"
80, Math, 26, "((ICDF_B[0] * r + ICDF_B[1]) * r + ICDF_B[2]) * r + ICDF_B[3]", "((ICDF_B[0] * r + ICDF_B[1]) * r + ICDF_B[2]) * r - ICDF_B[3]"
81, Math, 26, "((ICDF_B[0] * r + ICDF_B[1]) * r + ICDF_B[2]) * r", "((ICDF_B[0] * r + ICDF_B[1]) * r + ICDF_B[2]) / r"
82, Math, 26, "(ICDF_B[0] * r + ICDF_B[1]) * r + ICDF_B[2]", "(ICDF_B[0] * r + ICDF_B[1]) * r - ICDF_B[2]"
83, Math, 26, "(ICDF_B[0] * r + ICDF_B[1]) * r", "(ICDF_B[0] * r + ICDF_B[1]) / r"
84, Math, 26, "ICDF_B[0] * r + ICDF_B[1]", "ICDF_B[0] * r - ICDF_B[1]"
85, Math, 26, "ICDF_B[0] * r", "ICDF_B[0] / r"
86, ConditionalsBoundary, 14, "d < 0", "d <= 0"
87, ConditionalsBoundary, 14, "d > 1", "d >= 1"
88, ConditionalsBoundary, 15, "d < P_LOW", "d <= P_LOW"
89, ConditionalsBoundary, 19, "P_HIGH < d", "P_HIGH <= d"
