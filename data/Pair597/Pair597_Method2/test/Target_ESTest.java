/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 27 15:03:27 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Target_ESTest extends Target_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Target target0 = new Target();
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = new Integer(3215);
      vector0.add(integer0);
      int int0 = target0.__target__(vector0);
      assertEquals(3215, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Target target0 = new Target();
      // Undeclared exception!
      try { 
        target0.__target__((Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Target", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Target target0 = new Target();
      Vector<Object> vector0 = new Vector<Object>();
      vector0.add((Object) target0);
      // Undeclared exception!
      try { 
        target0.__target__(vector0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class Target cannot be cast to class java.lang.Integer (Target is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @5ceb3bfd; java.lang.Integer is in module java.base of loader 'bootstrap')
         //
         verifyException("Target", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Target target0 = new Target();
      Vector<Object> vector0 = new Vector<Object>();
      Integer integer0 = new Integer((-4483));
      vector0.add((Object) integer0);
      int int0 = target0.__target__(vector0);
      assertEquals((-4483), int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Target target0 = new Target();
      Vector<Object> vector0 = new Vector<Object>();
      int int0 = target0.__target__(vector0);
      assertEquals(0, int0);
  }
}
