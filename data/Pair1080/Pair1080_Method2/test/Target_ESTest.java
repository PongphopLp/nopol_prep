/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 29 17:55:35 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Target_ESTest extends Target_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Target target0 = new Target();
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      boolean boolean0 = target0.__target__(charBuffer1, charBuffer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Target target0 = new Target();
      char[] charArray0 = new char[7];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.allocate(599);
      boolean boolean0 = target0.__target__(charBuffer1, charBuffer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Target target0 = new Target();
      CharBuffer charBuffer0 = CharBuffer.allocate(4225);
      target0.__target__(charBuffer0, charBuffer0);
      target0.__target__(charBuffer0, charBuffer0);
      // Undeclared exception!
      target0.__target__(charBuffer0, charBuffer0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(4200);
      Target target0 = new Target();
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      charBuffer0.position(4200);
      // Undeclared exception!
      try { 
        target0.__target__(charBuffer1, charBuffer1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Target target0 = new Target();
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      boolean boolean0 = target0.__target__(charBuffer0, charBuffer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      Target target0 = new Target();
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 1, 1);
      boolean boolean0 = target0.__target__(charBuffer1, charBuffer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(4200);
      Target target0 = new Target();
      boolean boolean0 = target0.__target__(charBuffer0, (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Target target0 = new Target();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      boolean boolean0 = target0.__target__((CharSequence) null, charBuffer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Target target0 = new Target();
      boolean boolean0 = target0.__target__((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }
}
