01, InvertNegatives, 43, "-1", "1"
02, Increments, 49, "i++", "i--"
03, Increments, 63, "i++", "i--"
04, NegateConditionals, 7, "base.charAt(base.length() - 1) == '/'", "base.charAt(base.length() - 1) != '/'"
05, NegateConditionals, 7, "base.charAt(base.length() - 1) == '\\'", "base.charAt(base.length() - 1) != '\\'"
06, NegateConditionals, 12, "canonicalTarget.charAt(canonicalTarget.length() - 1) == '/'", "canonicalTarget.charAt(canonicalTarget.length() - 1) != '/'"
07, NegateConditionals, 12, "canonicalTarget.charAt(canonicalTarget.length() - 1) == '\\'", "canonicalTarget.charAt(canonicalTarget.length() - 1) != '\\'"
08, NegateConditionals, 36, "canonicalBase.charAt(0) == '/'", "canonicalBase.charAt(0) != '/'"
09, NegateConditionals, 37, "canonicalTarget.charAt(0) != '/'", "canonicalTarget.charAt(0) == '/'"
10, NegateConditionals, 45, "canonicalTarget.length() < minLength", "canonicalTarget.length() >= minLength"
11, NegateConditionals, 49, "i < minLength", "i >= minLength"
12, NegateConditionals, 50, "canonicalTarget.charAt(i) == canonicalBase.charAt(i)", "canonicalTarget.charAt(i) != canonicalBase.charAt(i)"
13, NegateConditionals, 51, "canonicalTarget.charAt(i) == '/'", "canonicalTarget.charAt(i) != '/'"
14, NegateConditionals, 51, "canonicalTarget.charAt(i) == '\\'", "canonicalTarget.charAt(i) != '\\'"
15, NegateConditionals, 61, "canonicalBase.length() > firstDifference", "canonicalBase.length() <= firstDifference"
16, NegateConditionals, 63, "i < canonicalBase.length()", "i >= canonicalBase.length()"
17, NegateConditionals, 64, "canonicalBase.charAt(i) == '/'", "canonicalBase.charAt(i) != '/'"
18, NegateConditionals, 64, "canonicalBase.charAt(i) == '\\'", "canonicalBase.charAt(i) != '\\'"
19, NegateConditionals, 70, "canonicalTarget.length() > firstDifference", "canonicalTarget.length() <= firstDifference"
20, NegateConditionals, 71, "relativePath.length() > 0", "relativePath.length() <= 0"
21, Math, 7, "base.length() - 1", "base.length() + 1"
22, Math, 7, "base.length() - 1", "base.length() + 1"
23, Math, 8, "base.length() - 1", "base.length() + 1"
24, Math, 12, "canonicalTarget.length() - 1", "canonicalTarget.length() + 1"
25, Math, 12, "canonicalTarget.length() - 1", "canonicalTarget.length() + 1"
26, Math, 13, "canonicalTarget.length() - 1", "canonicalTarget.length() + 1"
27, Math, 48, "minLength + 1", "minLength - 1"
28, Math, 56, "lastSeparator + 1", "lastSeparator - 1"
29, ConditionalsBoundary, 45, "canonicalTarget.length() < minLength", "canonicalTarget.length() <= minLength"
30, ConditionalsBoundary, 49, "i < minLength", "i <= minLength"
31, ConditionalsBoundary, 61, "canonicalBase.length() > firstDifference", "canonicalBase.length() >= firstDifference"
32, ConditionalsBoundary, 63, "i < canonicalBase.length()", "i <= canonicalBase.length()"
33, ConditionalsBoundary, 70, "canonicalTarget.length() > firstDifference", "canonicalTarget.length() >= firstDifference"
34, ConditionalsBoundary, 71, "relativePath.length() > 0", "relativePath.length() >= 0"
35, VoidMethodCalls, 62, "relativePath.append("..");
", "DELETED"
36, VoidMethodCalls, 65, "relativePath.append(separator);
", "DELETED"
37, VoidMethodCalls, 66, "relativePath.append("..");
", "DELETED"
38, VoidMethodCalls, 72, "relativePath.append(separator);
", "DELETED"
39, VoidMethodCalls, 74, "relativePath.append(canonicalTarget.substring(firstDifference));
", "DELETED"
