/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 29 02:30:55 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Target_ESTest extends Target_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Target target0 = new Target();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Object object0 = new Object();
      arrayList0.add(object0);
      List<Object> list0 = arrayList0.subList(1, 1);
      arrayList0.add((Object) arrayList0);
      // Undeclared exception!
      try { 
        target0.__target__(list0, arrayList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Target target0 = new Target();
      // Undeclared exception!
      try { 
        target0.__target__((List) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Target", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Target target0 = new Target();
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      List<Object> list0 = List.of((Object) target0, object0, (Object) target0, (Object) integer0, (Object) integer0, object0);
      int int0 = target0.__target__(list0, object0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Target target0 = new Target();
      Integer integer0 = new Integer(0);
      List<Integer> list0 = List.of(integer0, integer0, integer0, integer0, integer0, integer0, integer0, integer0, integer0, integer0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      int int0 = target0.__target__(list0, arrayList0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Target target0 = new Target();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) arrayList0);
      int int0 = target0.__target__(arrayList0, arrayList0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Target target0 = new Target();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Object object0 = new Object();
      arrayList0.add(object0);
      int int0 = target0.__target__(arrayList0, arrayList0);
      assertEquals((-1), int0);
  }
}
