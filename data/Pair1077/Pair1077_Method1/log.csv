01, ConditionalsBoundary, 12, "c1 >= 0xD800", "c1 > 0xD800"
02, ConditionalsBoundary, 12, "c1 < 0xDC00", "c1 <= 0xDC00"
03, ConditionalsBoundary, 12, "i1 < len1", "i1 <= len1"
04, ConditionalsBoundary, 14, "c2 >= 0xD800", "c2 > 0xD800"
05, ConditionalsBoundary, 14, "c2 < 0xDC00", "c2 <= 0xDC00"
06, ConditionalsBoundary, 14, "i2 < len2", "i2 <= len2"
07, ConditionalsBoundary, 15, "c1 < c2", "c1 <= c2"
08, InvertNegatives, 9, "-1", "1"
09, InvertNegatives, 15, "-1", "1"
10, Math, 12, "(c1 - 0xD800) * 0x400 + (str1.charAt(i1++) - 0xDC00) + 0x10000", "(c1 - 0xD800) * 0x400 + (str1.charAt(i1++) - 0xDC00) - 0x10000"
11, Math, 12, "(c1 - 0xD800) * 0x400 + (str1.charAt(i1++) - 0xDC00)", "(c1 - 0xD800) * 0x400 - (str1.charAt(i1++) - 0xDC00)"
12, Math, 12, "(c1 - 0xD800) * 0x400", "(c1 - 0xD800) / 0x400"
13, Math, 12, "c1 - 0xD800", "c1 + 0xD800"
14, Math, 12, "str1.charAt(i1++) - 0xDC00", "str1.charAt(i1++) + 0xDC00"
15, Math, 14, "(c2 - 0xD800) * 0x400 + (str2.charAt(i2++) - 0xDC00) + 0x10000", "(c2 - 0xD800) * 0x400 + (str2.charAt(i2++) - 0xDC00) - 0x10000"
16, Math, 14, "(c2 - 0xD800) * 0x400 + (str2.charAt(i2++) - 0xDC00)", "(c2 - 0xD800) * 0x400 - (str2.charAt(i2++) - 0xDC00)"
17, Math, 14, "(c2 - 0xD800) * 0x400", "(c2 - 0xD800) / 0x400"
18, Math, 14, "c2 - 0xD800", "c2 + 0xD800"
19, Math, 14, "str2.charAt(i2++) - 0xDC00", "str2.charAt(i2++) + 0xDC00"
20, Increments, 11, "i1++", "i1--"
21, Increments, 12, "i1++", "i1--"
22, Increments, 13, "i2++", "i2--"
23, Increments, 14, "i2++", "i2--"
24, NegateConditionals, 9, "i1 == len1", "i1 != len1"
25, NegateConditionals, 9, "i2 == len2", "i2 != len2"
26, NegateConditionals, 10, "i2 == len2", "i2 != len2"
27, NegateConditionals, 12, "c1 >= 0xD800", "c1 < 0xD800"
28, NegateConditionals, 12, "c1 < 0xDC00", "c1 >= 0xDC00"
29, NegateConditionals, 12, "i1 < len1", "i1 >= len1"
30, NegateConditionals, 14, "c2 >= 0xD800", "c2 < 0xD800"
31, NegateConditionals, 14, "c2 < 0xDC00", "c2 >= 0xDC00"
32, NegateConditionals, 14, "i2 < len2", "i2 >= len2"
33, NegateConditionals, 15, "c1 != c2", "c1 == c2"
34, NegateConditionals, 15, "c1 < c2", "c1 >= c2"
35, PrimitiveReturns, 10, "1", "0"
