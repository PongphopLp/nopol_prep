/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 26 09:31:32 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Target_ESTest extends Target_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Target target0 = new Target();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-128);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)76;
      int int0 = target0.__target__(byteArray0, byteArray1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Target target0 = new Target();
      // Undeclared exception!
      try { 
        target0.__target__((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Target", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Target target0 = new Target();
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[0];
      int int0 = target0.__target__(byteArray0, byteArray1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Target target0 = new Target();
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[0];
      int int0 = target0.__target__(byteArray1, byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Target target0 = new Target();
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-126);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-1);
      int int0 = target0.__target__(byteArray1, byteArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Target target0 = new Target();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-127);
      int int0 = target0.__target__(byteArray1, byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Target target0 = new Target();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-128);
      byte[] byteArray1 = new byte[6];
      int int0 = target0.__target__(byteArray0, byteArray1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Target target0 = new Target();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byte[] byteArray1 = new byte[4];
      int int0 = target0.__target__(byteArray0, byteArray1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Target target0 = new Target();
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)107;
      int int0 = target0.__target__(byteArray0, byteArray1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Target target0 = new Target();
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-1);
      int int0 = target0.__target__(byteArray0, byteArray1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Target target0 = new Target();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-128);
      int int0 = target0.__target__(byteArray0, byteArray0);
      assertEquals(0, int0);
  }
}
